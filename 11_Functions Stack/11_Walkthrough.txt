Assembly Primer for Hackers Part 11 Functions Stack

1.) Program listing
kan1shka9@dev:~/Desktop/PAL/10$ cat -n Function3.s
     1  .data
     2
     3          HelloWorld:
     4                  .asciz "Hello World!\n"
     5
     6  .text
     7
     8          .globl _start
     9          .type PrintFunction, @function
    10
    11          PrintFunction:
    12
    13                  pushl %ebp  # store the current value of EBP on the stack
    14                  movl %esp, %ebp # Make EBP point to top of stack
    15
    16                  # The write function
    17
    18                  movl $4, %eax
    19                  movl $1, %ebx
    20                  movl 8(%ebp), %ecx
    21                  movl 12(%ebp), %edx
    22                  int $0x80
    23
    24                  movl %ebp, %esp # Restore the old value of ESP
    25                  popl %ebp # Restore the old value of EBP
    26                  ret  # change EIP to start the next instruction
    27
    28          _start:
    29
    30                  nop
    31
    32                  # push the strlen on the stack
    33                  pushl $13
    34
    35                  # push the string pointer on the stack
    36
    37                  pushl $HelloWorld
    38
    39                  # Call the function
    40                  call PrintFunction
    41
    42                  # adjust the stack pointer
    43
    44                  addl $8, %esp
    45
    46
    47                  # Exit Routine
    48
    49                  ExitCall:
    50
    51                          movl $1, %eax
    52                          int $0x80
    53
    54
kan1shka9@dev:~/Desktop/PAL/10$

2.) Assemble and link the program
kan1shka9@dev:~/Desktop/PAL/10$ ls
Function3.s
kan1shka9@dev:~/Desktop/PAL/10$ as -ggstabs -o Function3.o Function3.s
kan1shka9@dev:~/Desktop/PAL/10$ ls
Function3.o  Function3.s
-rw-rw-r-- 1 kan1shka9 1344 Jul  8 00:36 Function3.o
kan1shka9@dev:~/Desktop/PAL/10$
kan1shka9@dev:~/Desktop/PAL/10$ ld -o Function3 Function3.o
kan1shka9@dev:~/Desktop/PAL/10$ ls
Function3  Function3.o  Function3.s
kan1shka9@dev:~/Desktop/PAL/10$ ./Function3
Hello World!
kan1shka9@dev:~/Desktop/PAL/10$

3.) Run it in GDB
kan1shka9@dev:~/Desktop/PAL/10$ gdb ./Function3
GNU gdb (Ubuntu 7.7.1-0ubuntu5~14.04.2) 7.7.1
Copyright (C) 2014 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "i686-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./Function3...done.
(gdb) l
1       .data
2
3               HelloWorld:
4                       .asciz "Hello World!\n"
5
6       .text
7
8               .globl _start
9               .type PrintFunction, @function
10
(gdb)
11              PrintFunction:
12
13                      pushl %ebp  # store the current value of EBP on the stack
14                      movl %esp, %ebp # Make EBP point to top of stack
15
16                      # The write function
17
18                      movl $4, %eax
19                      movl $1, %ebx
20                      movl 8(%ebp), %ecx
(gdb)
21                      movl 12(%ebp), %edx
22                      int $0x80
23
24                      movl %ebp, %esp # Restore the old value of ESP
25                      popl %ebp # Restore the old value of EBP
26                      ret  # change EIP to start the next instruction
27
28              _start:
29
30                      nop
(gdb)
31
32                      # push the strlen on the stack
33                      pushl $13
34
35                      # push the string pointer on the stack
36
37                      pushl $HelloWorld
38
39                      # Call the function
40                      call PrintFunction
(gdb) break 33
Breakpoint 1 at 0x804808e: file Function3.s, line 33.
(gdb) run
Starting program: /home/kan1shka9/Desktop/PAL/10/Function3

Breakpoint 1, _start () at Function3.s:33
33                      pushl $13
(gdb) print /x $esp
$1 = 0xbffff720
(gdb) x/4xw $esp
0xbffff720:     0x00000001      0xbffff85f      0x00000000      0xbffff888
(gdb) s
37                      pushl $HelloWorld
(gdb) x/4xw $esp
0xbffff71c:     0x0000000d      0x00000001      0xbffff85f      0x00000000
(gdb) x/4dw $esp
0xbffff71c:     13      1       -1073743777     0
(gdb) print /x $HelloWorld
$2 = Value can't be converted to integer.
(gdb) print /x &HelloWorld
$3 = 0x80490a4
(gdb) s
40                      call PrintFunction
(gdb) x/4xw $esp
0xbffff718:     0x080490a4      0x0000000d      0x00000001      0xbffff85f
(gdb) disassemble _start
Dump of assembler code for function _start:
   0x0804808d <+0>:     nop
   0x0804808e <+1>:     push   $0xd
   0x08048090 <+3>:     push   $0x80490a4
=> 0x08048095 <+8>:     call   0x8048074 <PrintFunction>
   0x0804809a <+13>:    add    $0x8,%esp
End of assembler dump.
(gdb) s
13                      pushl %ebp  # store the current value of EBP on the stack
(gdb) x/4xw $esp
0xbffff714:     0x0804809a      0x080490a4      0x0000000d      0x00000001
(gdb) print /x $ebp
$4 = 0x0
(gdb) s
14                      movl %esp, %ebp # Make EBP point to top of stack
(gdb) x/4xw $esp
0xbffff710:     0x00000000      0x0804809a      0x080490a4      0x0000000d
(gdb) s
PrintFunction () at Function3.s:18
18                      movl $4, %eax
(gdb) print /x $ebp
$5 = 0xbffff710
(gdb) s
19                      movl $1, %ebx
(gdb) s
20                      movl 8(%ebp), %ecx
(gdb) x/4xw $ebp
0xbffff710:     0x00000000      0x0804809a      0x080490a4      0x0000000d
(gdb) s
21                      movl 12(%ebp), %edx
(gdb) print /x $ecx
$6 = 0x80490a4
(gdb) print *0x80490a4
$7 = 1819043144
(gdb) x/1s $ecx
0x80490a4:      "Hello World!\n"
(gdb) s
22                      int $0x80
(gdb) print /d $edx
$8 = 13
(gdb) s
Hello World!
24                      movl %ebp, %esp # Restore the old value of ESP
(gdb) s
25                      popl %ebp # Restore the old value of EBP
(gdb) s
26                      ret  # change EIP to start the next instruction
(gdb) x/4xw $esp
0xbffff714:     0x0804809a      0x080490a4      0x0000000d      0x00000001
(gdb) s
_start () at Function3.s:44
44                      addl $8, %esp
(gdb) x/4xw $esp
0xbffff718:     0x080490a4      0x0000000d      0x00000001      0xbffff85f
(gdb) s
51                              movl $1, %eax
(gdb) x/4xw $esp
0xbffff720:     0x00000001      0xbffff85f      0x00000000      0xbffff888
(gdb)

4.) Function Prologue
pushl %ebp  # store the current value of EBP on the stack 
movl %esp, %ebp # Make EBP point to top of stack
We have to save the state of ESP so we will use EBP to do that.
But EBP is used for various things in the main function so its state has to be preserved as well.

5.) Function Epilogue
movl %ebp, %esp # Restore the old value of ESP
popl %ebp # Restore the old value of EBP 
ret  # change EIP to start the next instruction